// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dFHT_c
NumericVector dFHT_c(NumericVector t, double x0, double nu, double kappa, double sigma);
RcppExport SEXP _reThReg_dFHT_c(SEXP tSEXP, SEXP x0SEXP, SEXP nuSEXP, SEXP kappaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dFHT_c(t, x0, nu, kappa, sigma));
    return rcpp_result_gen;
END_RCPP
}
// pFHT_c
NumericVector pFHT_c(NumericVector t, double x0, double nu, double kappa, double sigma);
RcppExport SEXP _reThReg_pFHT_c(SEXP tSEXP, SEXP x0SEXP, SEXP nuSEXP, SEXP kappaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(pFHT_c(t, x0, nu, kappa, sigma));
    return rcpp_result_gen;
END_RCPP
}
// solveQuad
NumericVector solveQuad(double slope, double intercept, double t_start, double u);
RcppExport SEXP _reThReg_solveQuad(SEXP slopeSEXP, SEXP interceptSEXP, SEXP t_startSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< double >::type t_start(t_startSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(solveQuad(slope, intercept, t_start, u));
    return rcpp_result_gen;
END_RCPP
}
// rFHT_c
List rFHT_c(int n, double x0, double nu, double kappa, double sigma, double k, double lambda_1, NumericVector t_point, NumericVector slopes, NumericVector intercepts, NumericVector M, NumericVector I, NumericVector pt_point);
RcppExport SEXP _reThReg_rFHT_c(SEXP nSEXP, SEXP x0SEXP, SEXP nuSEXP, SEXP kappaSEXP, SEXP sigmaSEXP, SEXP kSEXP, SEXP lambda_1SEXP, SEXP t_pointSEXP, SEXP slopesSEXP, SEXP interceptsSEXP, SEXP MSEXP, SEXP ISEXP, SEXP pt_pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_1(lambda_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t_point(t_pointSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type slopes(slopesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type intercepts(interceptsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pt_point(pt_pointSEXP);
    rcpp_result_gen = Rcpp::wrap(rFHT_c(n, x0, nu, kappa, sigma, k, lambda_1, t_point, slopes, intercepts, M, I, pt_point));
    return rcpp_result_gen;
END_RCPP
}
