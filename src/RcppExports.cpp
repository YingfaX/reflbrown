// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dfhtrbm_c
NumericVector dfhtrbm_c(NumericVector t, double x0, double nu, double kappa, double sigma);
RcppExport SEXP _reflbrown_dfhtrbm_c(SEXP tSEXP, SEXP x0SEXP, SEXP nuSEXP, SEXP kappaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dfhtrbm_c(t, x0, nu, kappa, sigma));
    return rcpp_result_gen;
END_RCPP
}
// pfhtrbm_c
NumericVector pfhtrbm_c(NumericVector t, double x0, double nu, double kappa, double sigma);
RcppExport SEXP _reflbrown_pfhtrbm_c(SEXP tSEXP, SEXP x0SEXP, SEXP nuSEXP, SEXP kappaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(pfhtrbm_c(t, x0, nu, kappa, sigma));
    return rcpp_result_gen;
END_RCPP
}
// solveQuad
NumericVector solveQuad(double slope, double intercept, double t_start, double u);
RcppExport SEXP _reflbrown_solveQuad(SEXP slopeSEXP, SEXP interceptSEXP, SEXP t_startSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< double >::type t_start(t_startSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(solveQuad(slope, intercept, t_start, u));
    return rcpp_result_gen;
END_RCPP
}
// rfhtrbm_c
List rfhtrbm_c(int n, double x0, double nu, double kappa, double sigma, double k, double lambda_1, NumericVector t_point, NumericVector slopes, NumericVector intercepts, NumericVector M, NumericVector I, NumericVector pt_point);
RcppExport SEXP _reflbrown_rfhtrbm_c(SEXP nSEXP, SEXP x0SEXP, SEXP nuSEXP, SEXP kappaSEXP, SEXP sigmaSEXP, SEXP kSEXP, SEXP lambda_1SEXP, SEXP t_pointSEXP, SEXP slopesSEXP, SEXP interceptsSEXP, SEXP MSEXP, SEXP ISEXP, SEXP pt_pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_1(lambda_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t_point(t_pointSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type slopes(slopesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type intercepts(interceptsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pt_point(pt_pointSEXP);
    rcpp_result_gen = Rcpp::wrap(rfhtrbm_c(n, x0, nu, kappa, sigma, k, lambda_1, t_point, slopes, intercepts, M, I, pt_point));
    return rcpp_result_gen;
END_RCPP
}
// pfhtrbm_c_db
double pfhtrbm_c_db(double t, double x0, double nu, double kappa, double sigma);
RcppExport SEXP _reflbrown_pfhtrbm_c_db(SEXP tSEXP, SEXP x0SEXP, SEXP nuSEXP, SEXP kappaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(pfhtrbm_c_db(t, x0, nu, kappa, sigma));
    return rcpp_result_gen;
END_RCPP
}
// lklhSubj
double lklhSubj(NumericVector t, NumericVector event, double x0, double nu, double kappa, double sigma);
RcppExport SEXP _reflbrown_lklhSubj(SEXP tSEXP, SEXP eventSEXP, SEXP x0SEXP, SEXP nuSEXP, SEXP kappaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type event(eventSEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(lklhSubj(t, event, x0, nu, kappa, sigma));
    return rcpp_result_gen;
END_RCPP
}
// obsLklh_c
NumericVector obsLklh_c(NumericVector t, NumericVector event, arma::vec covar_sigma, arma::vec covar_kappa, arma::mat mcmc_sigma, arma::mat mcmc_kappa, arma::mat mcmc_gamma, arma::mat mcmc_theta, arma::vec mc_z1, arma::vec mc_z2, String frailty, double x0, double nu);
RcppExport SEXP _reflbrown_obsLklh_c(SEXP tSEXP, SEXP eventSEXP, SEXP covar_sigmaSEXP, SEXP covar_kappaSEXP, SEXP mcmc_sigmaSEXP, SEXP mcmc_kappaSEXP, SEXP mcmc_gammaSEXP, SEXP mcmc_thetaSEXP, SEXP mc_z1SEXP, SEXP mc_z2SEXP, SEXP frailtySEXP, SEXP x0SEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type event(eventSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type covar_sigma(covar_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type covar_kappa(covar_kappaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mcmc_sigma(mcmc_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mcmc_kappa(mcmc_kappaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mcmc_gamma(mcmc_gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mcmc_theta(mcmc_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mc_z1(mc_z1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mc_z2(mc_z2SEXP);
    Rcpp::traits::input_parameter< String >::type frailty(frailtySEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(obsLklh_c(t, event, covar_sigma, covar_kappa, mcmc_sigma, mcmc_kappa, mcmc_gamma, mcmc_theta, mc_z1, mc_z2, frailty, x0, nu));
    return rcpp_result_gen;
END_RCPP
}
// simPath_c
List simPath_c(double x0, double nu, double kappa, double sigma, NumericVector dt);
RcppExport SEXP _reflbrown_simPath_c(SEXP x0SEXP, SEXP nuSEXP, SEXP kappaSEXP, SEXP sigmaSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dt(dtSEXP);
    rcpp_result_gen = Rcpp::wrap(simPath_c(x0, nu, kappa, sigma, dt));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_reflbrown_dfhtrbm_c", (DL_FUNC) &_reflbrown_dfhtrbm_c, 5},
    {"_reflbrown_pfhtrbm_c", (DL_FUNC) &_reflbrown_pfhtrbm_c, 5},
    {"_reflbrown_solveQuad", (DL_FUNC) &_reflbrown_solveQuad, 4},
    {"_reflbrown_rfhtrbm_c", (DL_FUNC) &_reflbrown_rfhtrbm_c, 13},
    {"_reflbrown_pfhtrbm_c_db", (DL_FUNC) &_reflbrown_pfhtrbm_c_db, 5},
    {"_reflbrown_lklhSubj", (DL_FUNC) &_reflbrown_lklhSubj, 6},
    {"_reflbrown_obsLklh_c", (DL_FUNC) &_reflbrown_obsLklh_c, 13},
    {"_reflbrown_simPath_c", (DL_FUNC) &_reflbrown_simPath_c, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_reflbrown(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
