% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simData.R
\name{simData}
\alias{simData}
\title{Simulated Recurrent Events}
\usage{
simData(
  size,
  endTime,
  X,
  sigmaCoef,
  kappaCoef,
  theta,
  gamma,
  x0,
  nu,
  sigmaZ = NULL,
  kappaZ = NULL,
  roundTime = TRUE,
  gapTime = FALSE,
  event_num = 500
)
}
\arguments{
\item{size}{Patient sample size. This argument should be a numeric value}

\item{endTime}{The end of the follow up times of patients.
This argument should be a numeric vector.}

\item{X}{The covariates matrix for patients.
This argument should be a matrix which records the covariate vector of
subject $i$ in row i.}

\item{sigmaCoef}{The coefficents of volatility.
This argument should be a numeric vector.}

\item{kappaCoef}{The coefficents of upper reflection barrier.
This argument should be a numeric vector.}

\item{theta}{The variance of frailties.
This argument should be a numeric vector with length $2$.}

\item{gamma}{The coefficient of frailty.
This argument should be a numeric value.}

\item{x0}{The starting point of the reflected Brownian motion.
This argument should be a numeric value.}

\item{nu}{The lower boundary of the reflected Brownian motion.
This argument should be a numeric value.}

\item{sigmaZ}{The frailty in sigma, default is NULL.
This argument should be a numeric vector.}

\item{kappaZ}{The frailty in kappa, default is NULL.
This argument should be a numeric vector.}

\item{roundTime}{A logical value with default value TRUE indicating whether
to round the generated gap times or not round.}

\item{gapTime}{A logical value with default value FALSE indicating whether
to return the generated gap times or calender time.}

\item{event_num}{The number of simulated random gap times for one patients.
Only the cumulative random gap times smaller the follow up time are
saved as output. This argument should be a numeric value.}
}
\description{
The function simData generates simulated recurrent events from
reflected Brownian motion.
}
\examples{
data(simuCovDat)
size <- nrow(simuCovDat)
set.seed(2)
Intercept <- rep(1, size)
simuDat <- simData(size = size,
                   endTime = simuCovDat$censorTime,
                   X = cbind(Intercept, as.matrix(simuCovDat[, c("x1", "x2")])),
                   sigmaCoef = c(0.9, -0.2, -0.1),
                   kappaCoef = c(2.9, 0.2, -0.1),
                   theta = c(0.2, 0.3),
                   gamma = -0.4,
                   x0 = 10,
                   nu = 3.9)

head(simuDat)

}
